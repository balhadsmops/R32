{
  "project": {
    "name": "AI Statistical Analysis App",
    "description": "A comprehensive AI-powered statistical analysis platform designed for medical and healthcare data analysis",
    "version": "1.0.0",
    "type": "full-stack-web-app",
    "domain": "healthcare-analytics",
    "tags": ["ai", "statistics", "healthcare", "medical-research", "data-analysis", "machine-learning"],
    "created": "2024",
    "status": "production-ready"
  },
  "technology_stack": {
    "frontend": {
      "framework": "React",
      "version": "19.0.0",
      "language": "JavaScript",
      "build_tool": "Create React App with CRACO",
      "styling": "Tailwind CSS",
      "state_management": "React Hooks",
      "http_client": "Axios",
      "package_manager": "Yarn"
    },
    "backend": {
      "framework": "FastAPI",
      "version": "0.110.1",
      "language": "Python",
      "async_framework": "asyncio",
      "web_server": "Uvicorn",
      "cors": "Starlette CORS Middleware"
    },
    "database": {
      "primary": "MongoDB",
      "driver": "Motor (AsyncIO)",
      "version": "4.5.0",
      "connection": "AsyncIOMotorClient"
    },
    "ai_integration": {
      "llm_provider": "Google Gemini",
      "model": "gemini-2.5-flash",
      "integration_library": "emergentintegrations",
      "features": ["chat", "analysis-suggestions", "code-assistance"]
    }
  },
  "architecture": {
    "pattern": "3-tier-architecture",
    "components": {
      "presentation": "React SPA with 3-panel notebook interface",
      "business_logic": "FastAPI REST API with async processing",
      "data_persistence": "MongoDB with session-based storage"
    },
    "communication": {
      "frontend_backend": "HTTP REST API",
      "backend_database": "MongoDB async operations",
      "backend_ai": "HTTP requests to Gemini API"
    },
    "deployment": {
      "type": "local-development",
      "backend_port": 8001,
      "frontend_port": 3000,
      "database_port": 27017
    }
  },
  "features": {
    "core_features": [
      {
        "name": "CSV File Upload",
        "description": "Upload and validate CSV files for medical data analysis",
        "implementation": "FastAPI file upload with pandas validation",
        "status": "implemented"
      },
      {
        "name": "AI-Powered Chat",
        "description": "Interactive chat with Gemini LLM for statistical guidance",
        "implementation": "Gemini 2.5 Flash integration with context management",
        "status": "implemented"
      },
      {
        "name": "Python Code Execution",
        "description": "Sandbox environment for running statistical analysis code",
        "implementation": "In-memory Python execution with output capture",
        "status": "implemented"
      },
      {
        "name": "Session Management",
        "description": "Persistent analysis sessions with history tracking",
        "implementation": "MongoDB-based session storage with message history",
        "status": "implemented"
      },
      {
        "name": "3-Panel Interface",
        "description": "Notebook-style UI with sessions, chat, and results panels",
        "implementation": "React component with collapsible panels",
        "status": "implemented"
      }
    ],
    "advanced_features": [
      {
        "name": "Julius AI-Style Sectioned Execution",
        "description": "Automatic code organization into logical analysis sections",
        "implementation": "Custom AnalysisClassifier with healthcare-specific patterns",
        "status": "implemented"
      },
      {
        "name": "Structured Analysis Results",
        "description": "Organized analysis results with metadata and context",
        "implementation": "StructuredAnalysisResult model with section classification",
        "status": "implemented"
      },
      {
        "name": "Analysis History",
        "description": "Comprehensive tracking of all analyses and results",
        "implementation": "MongoDB storage with retrieval endpoints",
        "status": "implemented"
      },
      {
        "name": "Healthcare-Specific Analytics",
        "description": "Specialized analysis types for medical research",
        "implementation": "Enhanced classification for clinical trials, survival analysis, epidemiology",
        "status": "implemented"
      }
    ],
    "statistical_capabilities": [
      {
        "category": "Descriptive Statistics",
        "methods": ["mean", "median", "standard deviation", "quartiles", "frequency distributions"],
        "libraries": ["pandas", "numpy", "scipy.stats"]
      },
      {
        "category": "Inferential Statistics",
        "methods": ["t-tests", "chi-square tests", "ANOVA", "regression analysis"],
        "libraries": ["scipy.stats", "statsmodels", "sklearn"]
      },
      {
        "category": "Survival Analysis",
        "methods": ["Kaplan-Meier curves", "Cox proportional hazards", "log-rank tests"],
        "libraries": ["lifelines"]
      },
      {
        "category": "Visualization",
        "methods": ["histograms", "scatter plots", "box plots", "survival curves", "forest plots"],
        "libraries": ["matplotlib", "seaborn", "plotly", "forestplot"]
      },
      {
        "category": "Machine Learning",
        "methods": ["linear regression", "logistic regression", "random forest", "cross-validation"],
        "libraries": ["sklearn", "statsmodels"]
      }
    ]
  },
  "api_specification": {
    "base_url": "http://localhost:8001/api",
    "endpoints": {
      "sessions": {
        "GET /sessions": {
          "description": "List all analysis sessions",
          "response": "Array of session objects"
        },
        "POST /sessions": {
          "description": "Create new session with CSV upload",
          "request": "multipart/form-data with CSV file",
          "response": "Session object with data preview"
        },
        "GET /sessions/{id}": {
          "description": "Get specific session details",
          "response": "Session object with metadata"
        },
        "GET /sessions/{id}/messages": {
          "description": "Get chat messages for session",
          "response": "Array of message objects"
        }
      },
      "analysis": {
        "POST /sessions/{id}/chat": {
          "description": "Chat with LLM for analysis guidance",
          "request": "JSON with message and gemini_api_key",
          "response": "LLM response with analysis suggestions"
        },
        "POST /sessions/{id}/execute": {
          "description": "Execute Python code in sandbox",
          "request": "JSON with code string",
          "response": "Execution result with output and plots"
        },
        "POST /sessions/{id}/execute-sectioned": {
          "description": "Execute code with automatic sectioning",
          "request": "JSON with code string",
          "response": "StructuredAnalysisResult with classified sections"
        },
        "POST /sessions/{id}/suggest-analysis": {
          "description": "Get AI-powered analysis suggestions",
          "request": "JSON with gemini_api_key",
          "response": "LLM-generated analysis recommendations"
        }
      },
      "structured_analysis": {
        "GET /sessions/{id}/structured-analyses": {
          "description": "List all structured analyses for session",
          "response": "Array of StructuredAnalysisResult objects"
        },
        "GET /sessions/{id}/structured-analyses/{analysis_id}": {
          "description": "Get specific structured analysis",
          "response": "Complete StructuredAnalysisResult with sections"
        }
      },
      "history": {
        "GET /sessions/{id}/analysis-history": {
          "description": "Get analysis history for session",
          "response": "Array of historical analysis results"
        }
      }
    }
  },
  "data_models": {
    "session": {
      "fields": {
        "id": "string (UUID)",
        "filename": "string",
        "upload_date": "datetime",
        "data_preview": "object",
        "column_info": "array"
      }
    },
    "message": {
      "fields": {
        "id": "string (UUID)",
        "session_id": "string",
        "role": "string (user/assistant)",
        "content": "string",
        "timestamp": "datetime"
      }
    },
    "analysis_section": {
      "fields": {
        "id": "string (UUID)",
        "title": "string",
        "section_type": "string (summary/descriptive/statistical_test/visualization/etc.)",
        "code": "string",
        "output": "string",
        "success": "boolean",
        "error": "string (optional)",
        "metadata": "object",
        "tables": "array",
        "charts": "array",
        "order": "integer"
      }
    },
    "structured_analysis_result": {
      "fields": {
        "id": "string (UUID)",
        "session_id": "string",
        "title": "string",
        "sections": "array of AnalysisSection",
        "total_sections": "integer",
        "execution_time": "float",
        "timestamp": "datetime",
        "overall_success": "boolean"
      }
    }
  },
  "ui_components": {
    "layout": {
      "type": "3-panel-interface",
      "panels": {
        "left": {
          "name": "Sessions Panel",
          "features": ["session list", "file upload", "session selection"],
          "collapsible": true
        },
        "center": {
          "name": "Chat Panel",
          "features": ["message history", "input field", "code highlighting"],
          "collapsible": false
        },
        "right": {
          "name": "Results Panel",
          "features": ["execution results", "analysis history", "data preview"],
          "collapsible": true,
          "tabs": ["execution", "history", "data"]
        }
      }
    },
    "key_components": [
      {
        "name": "FileUpload",
        "description": "CSV file upload with validation",
        "features": ["drag-and-drop", "file validation", "progress indicator"]
      },
      {
        "name": "ChatInterface",
        "description": "Interactive chat with LLM",
        "features": ["message history", "code block rendering", "loading states"]
      },
      {
        "name": "ExecutionResults",
        "description": "Display code execution results",
        "features": ["output display", "plot rendering", "error handling"]
      },
      {
        "name": "DataPreview",
        "description": "Show uploaded data information",
        "features": ["data summary", "column info", "sample data"]
      },
      {
        "name": "AnalysisHistory",
        "description": "Historical analysis tracking",
        "features": ["result display", "timestamp tracking", "SPSS-style formatting"]
      }
    ]
  },
  "dependencies": {
    "python_libraries": {
      "core": {
        "fastapi": "0.110.1",
        "uvicorn": "0.25.0",
        "motor": "3.3.1",
        "pymongo": "4.5.0",
        "pydantic": ">=2.6.4"
      },
      "data_science": {
        "pandas": ">=2.2.0",
        "numpy": ">=1.26.0",
        "scipy": ">=1.11.0",
        "scikit-learn": ">=1.3.0",
        "matplotlib": ">=3.7.0",
        "seaborn": ">=0.12.0"
      },
      "advanced_analytics": {
        "plotly": ">=5.17.0",
        "statsmodels": ">=0.14.0",
        "lifelines": ">=0.27.0",
        "forestplot": ">=0.3.0"
      },
      "ai_integration": {
        "emergentintegrations": "latest"
      }
    },
    "javascript_libraries": {
      "core": {
        "react": "19.0.0",
        "react-dom": "19.0.0",
        "axios": "1.8.4"
      },
      "build_tools": {
        "react-scripts": "5.0.1",
        "@craco/craco": "7.1.0"
      },
      "styling": {
        "tailwindcss": "3.4.17",
        "autoprefixer": "10.4.20",
        "postcss": "8.4.49"
      }
    }
  },
  "configuration": {
    "environment_variables": {
      "backend": {
        "MONGO_URL": "MongoDB connection string",
        "DB_NAME": "Database name",
        "GEMINI_API_KEY": "Google Gemini API key"
      },
      "frontend": {
        "REACT_APP_BACKEND_URL": "Backend API base URL"
      }
    },
    "ports": {
      "backend": 8001,
      "frontend": 3000,
      "database": 27017
    }
  },
  "setup_instructions": {
    "prerequisites": [
      "Node.js v16+",
      "Python 3.8+",
      "MongoDB 4.4+",
      "Yarn package manager"
    ],
    "steps": [
      "Clone repository",
      "Install Python dependencies (pip install -r requirements.txt)",
      "Install Node.js dependencies (yarn install)",
      "Configure environment variables",
      "Start MongoDB service",
      "Start backend server (uvicorn)",
      "Start frontend development server (yarn start)"
    ]
  },
  "use_cases": {
    "medical_research": [
      "Clinical trial data analysis",
      "Survival analysis for patient outcomes",
      "Epidemiological studies",
      "Biostatistical analysis"
    ],
    "healthcare_analytics": [
      "Patient demographic analysis",
      "Treatment outcome comparisons",
      "Risk factor identification",
      "Diagnostic test performance"
    ],
    "general_statistics": [
      "Descriptive statistics",
      "Hypothesis testing",
      "Regression analysis",
      "Data visualization"
    ]
  },
  "testing_status": {
    "backend": {
      "status": "fully_tested",
      "coverage": "100%",
      "test_types": ["unit", "integration", "api"]
    },
    "frontend": {
      "status": "implemented",
      "coverage": "untested",
      "test_types": ["manual"]
    }
  },
  "future_enhancements": [
    "Tauri desktop application wrapper",
    "Additional AI model integrations",
    "Advanced visualization templates",
    "Report generation features",
    "User authentication system",
    "Cloud deployment options"
  ]
}